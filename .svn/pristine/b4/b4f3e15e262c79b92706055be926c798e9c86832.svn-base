
////-----------------------------------------------------------------------------
//
//作    者：王普强
//
//创建日期：2016.07.29
//
//文件说明：创建js组件库对象
//
//-----------------------------------------------------------------------------
if (!Function.prototype.bind) {
    Function.prototype.bind = function () {
        var fn = this, args = Array.prototype.slice.call(arguments), object = args.shift();
        return function () {
            return fn.apply(object, args.concat(Array.prototype.slice.call(arguments)));
        }
    }
}
/* 格式化日期 */
Date.prototype.Format = function (fmt) {
    var o = {
        "M+": this.getMonth() + 1, // 月份
        "d+": this.getDate(), // 日
        "h+": this.getHours(), // 小时
        "m+": this.getMinutes(), // 分
        "s+": this.getSeconds(), // 秒
        "q+": Math.floor((this.getMonth() + 3) / 3), // 季度
        "S": this.getMilliseconds() // 毫秒
    };
    if (/(y+)/.test(fmt))
        fmt = fmt.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length));
    for (var k in o)
        if (new RegExp("(" + k + ")").test(fmt))
            fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length)));
    return fmt;
}

//数组功能扩展
Array.prototype.each = function (fn) {
    fn = fn || Function.K;
    var a = [];
    var args = Array.prototype.slice.call(arguments, 1);
    for (var i = 0; i < this.length; i++) {
        var res = fn.apply(this, [this[i], i].concat(args));
        if (res != null)
            a.push(res);
    }
    return a;
};

//数组是否包含指定元素
Array.prototype.contains = function (suArr) {
    for (var i = 0; i < this.length; i++) {
        if (this[i] == suArr) {
            return true;
        }
    }
    return false;
};
//不重复元素构成的数组
Array.prototype.uniquelize = function () {
    var ra = new Array();
    for (var i = 0; i < this.length; i++) {
        if (!ra.contains(this[i])) {
            ra.push(this[i]);
        }
    }
    return ra;
};
//两个数组的补集
Array.complement = function (a, b) {
    return Array.minus(Array.union(a, b), Array.intersect(a, b));
};
//两个数组的交集
Array.intersect = function (a, b) {
    return a.uniquelize().each(function (o) {
        return b.contains(o) ? o : null
    });
};
//两个数组的差集
Array.minus = function (a, b) {
    return a.uniquelize().each(function (o) {
        return b.contains(o) ? null : o
    });
};
//两个数组并集
Array.union = function (a, b) {
    return a.concat(b).uniquelize();
};

(function (dy) {
    dy.add = function (key, value) {
        dy[key] = value;
    };
    dy.get = function (key) {
        return dy[key];
    };
    dy.remove = function (key) {
        dy[key] = null;
        delete dy[key];
    };
}(window.japp = window.japp || {}));

//本地缓存
(function () {
    var local = window.localStorage || {};
    var session = window.sessionStorage || {};
    var hostname =  location.hostname;//当前域名
    var prefix1 = "japp/store/"; //第一级存储名前辍,不能变
    var prefix2 = location.protocol + hostname + "/"; //第二级存储名前辍,可变
    //缓存名前辍,这样的设计思想是防止同一域名下,不同应用路径的页面间,储存的key冲突
    var prefixCache = prefix1 + prefix2; //key前辍
    var maxStoreSize = 10000; //最大的储存个数(本地缓存)
    var maxStoreTime = 7 * 24 * 60 * 60; //最长存储7天数据,单位为秒
    function ttlTime(ttl) {
        ttl = Math.abs(ttl);
        ttl = ttl > maxStoreTime ? maxStoreTime : ttl; //最长7天
        return new Date().getTime() + ttl * 1000;
    }
    function getKey(key) {
        return prefixCache + key;
    }

    var Store = {
        set: function (key, value, ttl) { // 储存到localStorage,ttl:unit is second
            key = getKey(key);
            set(key, value, ttl);
        },
        setSession: function (key, value) { // 储存到sessionStorage
            try {
                key = getKey(key);
                var item = {
                    data: value
                };
                session[key] = JSON.stringify(item);
            } catch (e) {
                console.log(e);
            }
        },
        get: function (key) { //对key做处理,取数据并返回
            key = getKey(key);
            return get(key);
        },
        getSession: function (key) {
            try {
                key = getKey(key);
                var val = session[key];
                if (val) {
                    var item = JSON.parse(session[key]);
                    return item.data;
                }
            } catch (e) {
                Store.removeSession(key.replace(prefixCache, ""));
                console.log("get session data is error:", key);
            }
            return null;
        },
        remove: function (key) {
            key = getKey(key);
            delete local[key];
        },
        removeSession: function (key) {
            key = getKey(key);
            delete session[key];
        },
        clear: function () {
            try {
                local.clear();
            } catch (e) {
                local = {};
            }
        },
        clearSession: function () {
            try {
                session.clear();
            } catch (e) {
                session = {};
            }
        }
    };

    //储存到本地缓存,不对key做处理

    function set(key, value, ttl) { // 储存到localStorage,ttl:unit is second
        try {
            ttl = ttl || 60 * 60; //默认1小时
            var item = {
                data: value,
                ttl: ttlTime(ttl)
            };
            local[key] = JSON.stringify(item);
        } catch (e) {
            console.log(e);
        }
    }
    //从localstorage取数据,不对key做处理

    function get(key) {
        var oldKey = (key || "").replace(prefixCache, "");
        try {
            var value = local[key];
            if (value) {
                var item = JSON.parse(value);
                if (item && typeof (item.data) != 'undefined' && item.ttl) {
                    if (item.ttl >= 0 && item.ttl <= new Date().getTime()) {
                        Store.remove(oldKey);
                        return null;
                    }
                    return item.data;
                }
            }
        } catch (e) {
            Store.remove(oldKey);
            console.log("get store data error:", e);
        }
        return null;
    }
    japp.add('store', Store);
}());


//----------------------------------------------
//说  明： 扩展JQuery对象的方法
//----------------------------------------------
jQuery.fn.extend({
    load: function (fun) {
        return this.each(function (i) {
            if (typeof (fun) == "function") {
                fun.apply(this);
            }
        });
    },
    render:function(obj){
        return this.each(function(i){
            var that = $(this);
            var func = function(that){
                var html = that.html();
                that.html('');
                for(var k in obj){
                    if(typeof(obj[k])!='function' && typeof(obj[k])!='object'){
                        var reg = new RegExp("{"+k+"}",'ig');
                        html = html.replace(reg,obj[k]);
                    }
                }
                that.html(html);
            }
            func.apply(this,[that]);
        });
    }
});










